package com.lanjiang.figersland.fragment;import android.content.Context;import android.content.Intent;import android.graphics.drawable.Drawable;import android.os.Bundle;import android.support.annotation.Nullable;import android.support.v4.view.ViewPager;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.LinearLayout;import android.widget.TextView;import com.lanjiang.figersland.Constant;import com.lanjiang.figersland.R;import com.lanjiang.figersland.adapter.BannerLoopAdapter;import com.lanjiang.figersland.bean.BannerItem;import com.lanjiang.figersland.bean.TopicEntrance;import com.lanjiang.figersland.ui.AllTopicActivity;import com.lanjiang.figersland.ui.BidDetailActivity;import com.lanjiang.figersland.ui.TopicDetailActivity;import com.lanjiang.figersland.utils.LogUtils;import com.lanjiang.figersland.utils.PopUtils;import com.lanjiang.figersland.widget.LineDecoration;import com.lanjiang.figersland.widget.MyScrollView;import com.zhy.adapter.recyclerview.CommonAdapter;import com.zhy.adapter.recyclerview.MultiItemTypeAdapter;import com.zhy.adapter.recyclerview.base.ViewHolder;import com.zhy.adapter.recyclerview.wrapper.LoadMoreWrapper;import java.util.ArrayList;import java.util.List;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;/** * Activities that contain this fragment must implement the * {@link OnFragmentInteractionListener} interface * to handleMessage interaction events. */public class BidFragment extends BFragment {    private static final String ARG_PARAM1 = "param1";    private static final String ARG_PARAM2 = "param2";    //第一个展示的项    public static int FIRST_APPEARED_ITEM = 1;    @BindView(R.id.scrollView)    MyScrollView scrollView;    @BindView(R.id.viewpager)    ViewPager viewpager;    @BindView(R.id.recycler_topic)    RecyclerView mRecyclerTopic;    @BindView(R.id.recycler_view)    RecyclerView mRecyclerView;    @BindView(R.id.tv_publish_time)    TextView tvPublishTime;    @BindView(R.id.tv_zone_filter)    TextView tvZoneFilter;    @BindView(R.id.tv_deadline)    TextView tvDeadline;    @BindView(R.id.dots_layout)    LinearLayout dotsLayout;    private int actionNow;    @OnClick({R.id.llt_publish_time, R.id.llt_zone_filter, R.id.llt_deadline})    public void click(View view) {        switch (view.getId()) {            case R.id.llt_publish_time:                switchState(tvPublishTime);                break;            case R.id.llt_zone_filter:                PopUtils.showCityWindow(mInflater, mContext, new PopUtils.PopClickListener() {                    @Override                    public void click(String city) {                        tvZoneFilter.setText(city);                    }                });                switchState(tvZoneFilter);                break;            case R.id.llt_deadline:                switchState(tvDeadline);                break;        }    }    private List<TopicEntrance> mTopicLists = new ArrayList<>();    private List<String> mBidLists = new ArrayList<>();    private String mParam1;    private String mParam2;    private OnFragmentInteractionListener mListener;    public BidFragment() {    }    public static BidFragment newInstance(String param1, String param2) {        BidFragment fragment = new BidFragment();        Bundle args = new Bundle();        args.putString(ARG_PARAM1, param1);        args.putString(ARG_PARAM2, param2);        fragment.setArguments(args);        return fragment;    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        if (getArguments() != null) {            mParam1 = getArguments().getString(ARG_PARAM1);            mParam2 = getArguments().getString(ARG_PARAM2);        }    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup container,                             Bundle savedInstanceState) {        View view = inflater.inflate(R.layout.fragment_bid, container, false);        ButterKnife.bind(this, view);        return view;    }    @Override    public void onViewCreated(View view, @Nullable Bundle savedInstanceState) {        super.onViewCreated(view, savedInstanceState);        mBannerAdapter = new BannerLoopAdapter(mContext, initViewPagerDataSource(), viewpager, dotsLayout);        viewpager.setAdapter(mBannerAdapter);        viewpager.setCurrentItem(FIRST_APPEARED_ITEM);        switchState(tvPublishTime);        initView();        initTopicAdapter();        initListAdapter();        initData();    }    private void initView() {        scrollView.setOnScrollActionListener(new MyScrollView.OnScrollActionListener() {            @Override            public void onScroll(int action, int scrollY) {//                LogUtils.e(TAG, "action:" + action + " ,scrollY" + scrollY);                if (actionNow == action) {                    return;                }                if (action == MyScrollView.ACTION_SCROLL_DOWN) {                    mListener.onFragmentInteraction(false);                } else if (action == MyScrollView.ACTION_SCROLL_UP) {                    mListener.onFragmentInteraction(true);                }                actionNow = action;            }        });    }    private void initTopicAdapter() {        mRecyclerTopic.setLayoutManager(new GridLayoutManager(mContext, 4));        CommonAdapter adapterTopic = new CommonAdapter<TopicEntrance>(mContext, R.layout.adapter_topic, mTopicLists) {            @Override            protected void convert(ViewHolder holder, TopicEntrance info, int position) {                holder.setText(R.id.tv_topic, info.getName());                holder.setImageResource(R.id.iv_topic, info.getIconId());            }        };        adapterTopic.setOnItemClickListener(new MultiItemTypeAdapter.OnItemClickListener() {            @Override            public void onItemClick(View view, RecyclerView.ViewHolder holder, int position) {                if (position == mTopicLists.size() - 1) {                    startActivity(new Intent(mContext, AllTopicActivity.class));                } else {                    startActivity(new Intent(mContext, TopicDetailActivity.class));                }            }            @Override            public boolean onItemLongClick(View view, RecyclerView.ViewHolder holder, int position) {                return false;            }        });        mRecyclerTopic.addItemDecoration(new LineDecoration(mContext, LinearLayoutManager.VERTICAL, LineDecoration.LEFT_RIGHT));        mRecyclerTopic.setAdapter(adapterTopic);    }    private void initListAdapter() {        mRecyclerView.setHasFixedSize(true);        mRecyclerView.setLayoutManager(new LinearLayoutManager(mContext));//        mRecyclerView.setLayoutManager(new FullyLinearLayoutManager(mContext));        CommonAdapter adapterBid = new CommonAdapter<String>(mContext, R.layout.adapter_bid, mBidLists) {            @Override            protected void convert(ViewHolder holder, String s, int position) {                holder.setText(R.id.tv_bid, s);                holder.setOnClickListener(R.id.adapter_bid, new View.OnClickListener() {                    @Override                    public void onClick(View v) {                        Intent intent = new Intent(mContext, BidDetailActivity.class);                        Bundle bundle = new Bundle();                        bundle.putInt(Constant.ACTIVITY_TYPE, Constant.TYPE_BID);                        intent.putExtras(bundle);                        startActivity(intent);                    }                });            }        };        LoadMoreWrapper moreAdapter = new LoadMoreWrapper(adapterBid);        moreAdapter.setOnLoadMoreListener(new LoadMoreWrapper.OnLoadMoreListener() {            @Override            public void onLoadMoreRequested() {                for (int i = 0; i < 5; i++) {                    mBidLists.add(getString(R.string.newest_bid_text) + i);                }                mRecyclerView.getAdapter().notifyDataSetChanged();            }        });        mRecyclerView.addItemDecoration(new LineDecoration(mContext, LinearLayoutManager.VERTICAL, LineDecoration.LEFT));        mRecyclerView.setAdapter(adapterBid);    }    /**     * 初始化数据: 视图，图片资源，文字资源, 并设置点击事件     */    private void initData() {        mTopicLists.add(new TopicEntrance("勘探设计", R.drawable.selector_kantan_icon));        mTopicLists.add(new TopicEntrance("基础设计", R.drawable.qianqi_normal_icon));        mTopicLists.add(new TopicEntrance("园林景观", R.drawable.shizheng_normal_icon));        mTopicLists.add(new TopicEntrance("承重结构", R.drawable.chengzhong_normal_icon));        mTopicLists.add(new TopicEntrance("勘探设计", R.drawable.selector_kantan_icon));        mTopicLists.add(new TopicEntrance("基础设计", R.drawable.qianqi_normal_icon));        mTopicLists.add(new TopicEntrance("园林景观", R.drawable.shizheng_normal_icon));        mTopicLists.add(new TopicEntrance("全部", R.drawable.all_icon));        mRecyclerTopic.getAdapter().notifyDataSetChanged();        for (int i = 0; i < 10; i++) {            mBidLists.add(getString(R.string.newest_bid_text) + i);        }        mRecyclerView.getAdapter().notifyDataSetChanged();    }    /**     * 初始化viewpager数据: 视图，图片资源，文字资源, 并设置点击事件     */    private List<BannerItem> initViewPagerDataSource() {        List<BannerItem> mViewList = new ArrayList<>();        int[] resIds = new int[]{R.drawable.banner1, R.drawable.banner2};        for (int i = 0; i < resIds.length; i++) {            mViewList.add(new BannerItem(resIds[i]));        }        return mViewList;    }    @Override    public void onAttach(Context context) {        super.onAttach(context);        if (context instanceof OnFragmentInteractionListener) {            mListener = (OnFragmentInteractionListener) context;        } else {            throw new RuntimeException(context.toString()                    + " must implement OnFragmentInteractionListener");        }    }    @Override    public void onDetach() {        super.onDetach();        mListener = null;    }    /**     * This interface must be implemented by activities that contain this     * fragment to allow an interaction in this fragment to be communicated     * to the activity and potentially other fragments contained in that     * activity.     * <p>     * See the Android Training lesson <a href=     * "http://developer.android.com/training/basics/fragments/communicating.html"     * >Communicating with Other Fragments</a> for more information.     */    public interface OnFragmentInteractionListener {        void onFragmentInteraction(boolean show);    }    /**     * 设置当前按钮颜色 并 更换按钮状态     *     * @param view 被点击按钮     */    private void switchState(TextView view) {        //重置筛选按钮        Drawable unfocused = getResources().getDrawable(R.drawable.fabu_unselect_icon);        unfocused.setBounds(0, 0, unfocused.getMinimumWidth(), unfocused.getMinimumHeight());        tvPublishTime.setCompoundDrawables(null, null, unfocused, null);        tvPublishTime.setTextColor(getResources().getColor(R.color.text_gray));        tvDeadline.setCompoundDrawables(null, null, unfocused, null);        tvDeadline.setTextColor(getResources().getColor(R.color.text_gray));        //设置筛选控件点击        Drawable selector = getResources().getDrawable(R.drawable.selector_bid_text);        selector.setBounds(0, 0, selector.getMinimumWidth(), selector.getMinimumHeight());        if (!view.equals(tvZoneFilter)) {//筛选地区不更改            view.setCompoundDrawables(null, null, selector, null);            view.setTextColor(getResources().getColor(R.color.color_main));        }        //位置        Drawable location = getResources().getDrawable(R.drawable.location_icon);        location.setBounds(0, 0, location.getMinimumWidth(), location.getMinimumHeight());        tvZoneFilter.setCompoundDrawables(null, null, location, null);        tvZoneFilter.setTextColor(getResources().getColor(R.color.text_gray));        //设置位置点击        Drawable selectorLocation = getResources().getDrawable(R.drawable.selector_location_icon);        selectorLocation.setBounds(0, 0, selectorLocation.getMinimumWidth(), selectorLocation.getMinimumHeight());        if (view.equals(tvZoneFilter)) {//筛选地区不更改            view.setCompoundDrawables(null, null, selectorLocation, null);            view.setTextColor(getResources().getColor(R.color.color_main));        }        //改变所有状态        tvPublishTime.setSelected(view.equals(tvPublishTime) ? !tvPublishTime.isSelected() : false);        tvZoneFilter.setSelected(view.equals(tvZoneFilter));        tvDeadline.setSelected(view.equals(tvDeadline) ? !tvDeadline.isSelected() : false);//        LogUtils.e(TAG, " ,tvPublishTime.isSelected(): " + tvPublishTime.isSelected() + " ,tvDeadline.isSelected(): " + tvDeadline.isSelected());        //根据状态展示功能        switch (view.getId()) {            case R.id.tv_publish_time://发布时间                if (tvPublishTime.isSelected()) {                    LogUtils.i(TAG, "tvPublishTime , 正排序" + view.getId());                } else {                    LogUtils.i(TAG, "tvPublishTime , 反排序" + view.getId());                }                break;            case R.id.tv_zone_filter://地区筛选                if (tvZoneFilter.isSelected()) {                    LogUtils.i(TAG, "tvZoneFilter , 正排序" + view.getId());                } else {                    LogUtils.i(TAG, "tvZoneFilter , 反排序" + view.getId());                }                break;            case R.id.tv_deadline://截止时间                if (tvDeadline.isSelected()) {                    LogUtils.i(TAG, "tvDeadline , 正排序" + view.getId());                } else {                    LogUtils.i(TAG, "tvDeadline , 反排序" + view.getId());                }                break;            default:                break;        }    }}